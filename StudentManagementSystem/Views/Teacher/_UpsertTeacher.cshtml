@model SMS.Model.Teacher.TeacherBO

@{
    ViewData["Title"] = "Add Teacher";
}
@{
    var dateFormat = SMS.Common.DateFormat.defaultDateFormat;
}

<form id="teacherForm" asp-action="UpsertTeacher" asp-controller="Teacher" method="post" class="border p-4 mx-auto" style="max-width: 600px;">
    <input type="hidden" asp-for="TeacherID" />

    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="justify-content-center align-items-center">
        <h3 class="text-center">Teachers</h3>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.TeacherRegNo, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.TeacherRegNo, new { htmlAttributes = new { @class = "form-control", placeholder = "Teacher RegNo", id = "TeacherRegNo" } })
                <span id="TeacherRegNo-error" class="text-danger"></span>
                @Html.ValidationMessageFor(model => model.TeacherRegNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "First Name" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control", placeholder = "Middle Name" } })
                @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "Last Name" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.DisplayName, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control", placeholder = "Display Name", id = "DisplayName" } })
                <span id="DisplayName-error" class="text-danger"></span>
                @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Email Address", type = "email", id = "TeacherEmail" } })
                <span id="TeacherEmail-error" class="text-danger"></span>
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })<span class="required-asterisk text-danger">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</span>
            </div>
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.Gender, new SelectList(new[]
                         {
                new SelectListItem { Text = "Male", Value = "Male" },
                new SelectListItem { Text = "Female", Value = "Female" },
                new SelectListItem { Text = "Other", Value = "Other" },
                }, "Value", "Text"), "Gender", new { @class = "form-control form-select" })
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                
                <label asp-for="DOB"></label><span class="required-asterisk text-danger">&nbsp;&nbsp;*</span>
            </div>
            <div class="col-md-8">
                
                @Html.TextBoxFor(model => model.DOB, new { @class = "form-control", placeholder = "DD-MM-YYYY", id = "DOB" })
                @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", placeholder = "Address" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.ContactNo, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control", placeholder = "Contact No" } })
                @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.IsEnable, htmlAttributes: new { @class = "col-form-label" })
            </div>
            <div class="col-md-8">
                <div class="form-check m-3">
                    @Html.CheckBoxFor(model => model.IsEnable, new { @class = "form-check-input", id = "Enable" })
                </div>
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-10 offset-md-4">
                <br />
                <input type="submit" value="@((Model.TeacherID == null ? "Create" : "Update"))" class="btn text-light" style="background-color: #9F2B68" />
                <a href="#" class="btn btn-secondary" onclick="backTeacher()">Back</a>
            </div>
        </div>
    </div>
</form>

<script>
    $(document).ready(function () {
        $('#teacherForm').submit(function (e) {
            e.preventDefault();

            // Perform Ajax request
            $.ajax({
                url: $(this).attr('action'), // Action URL specified in form tag
                type: $(this).attr('method'), // HTTP method (post/get)
                data: $(this).serialize(), // Serialize form data
                success: function (response) {
                    // Handle success
                    addTeacherSuccess(response);
                },
                error: function (xhr, status, error) {
                    // Handle errors
                    addTeacherFailure(xhr);
                }
            });
        });
    });

    var dateFormat = "@dateFormat".replace(/yy/g, "y").replace(/M/g, "m");
    var today = new Date();
    $("#DOB").datepicker({
        dateFormat: dateFormat,
        changeYear: true,
        changeMonth: true,
        yearRange: "-100:+0",
        maxDate: "0",
    }).datepicker("setDate", today);

    // Check Registration Number already exists
    $('#TeacherRegNo').change(function () {
        var regNo = $(this).val();
        var teacherID = $('#TeacherID').val();
        $.ajax({
            url: '/Teacher/IsTeacherRegAvailable',
            type: 'GET',
            data: { regNo: regNo, teacherID: teacherID },
            success: function (response) {
                if (response.isAvailable) {
                    $('#TeacherRegNo-error').text('Teacher registration number already exists.');
                } else {
                    $('#TeacherRegNo-error').text('');
                }
            }
        });
    });

    // Check Display Name already exists
    $('#DisplayName').change(function () {
        var teacherName = $(this).val();
        var teacherID = $('#TeacherID').val();
        $.ajax({
            url: '/Teacher/IsTeacherNameAvailable',
            type: 'GET',
            data: { teacherName: teacherName, teacherID: teacherID },
            success: function (response) {
                if (response.isAvailable) {
                    $('#DisplayName-error').text('Teacher display name already exists.');
                } else {
                    $('#DisplayName-error').text('');
                }
            }
        });
    });

    // Check email already exist
    $('#TeacherEmail').change(function () {
        var teacherEmail = $(this).val();
        var teacherID = $('#TeacherID').val();
        $.ajax({
            url: '/Teacher/IsTeacherEmailAvailable',
            type: 'GET',
            data: { teacherEmail: teacherEmail, teacherID: teacherID },
            success: function (response) {
                if (response.isAvailable) {
                    $('#TeacherEmail-error').text('Teacher Email already exists.');
                } else {
                    $('#TeacherEmail-error').text('');
                }
            }
        });
    });

    
</script>
