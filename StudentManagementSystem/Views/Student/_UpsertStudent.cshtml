@model SMS.Model.Student.StudentBO

@{
    ViewData["Title"] = "Add Student";
}

<form id="studentForm" asp-action="UpsertStudent" asp-controller="Student" method="post" class="border p-4 mx-auto" style="max-width: 600px;">
    <input type="hidden" asp-for="StudentID" />

    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="justify-content-center align-items-center">
        <h3 class="text-center">Students</h3>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.StudentRegNo, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.StudentRegNo, new { htmlAttributes = new { @class = "form-control", placeholder = "Student RegNo", id = "StudentRegNo" } })
                <span id="StudentRegNo-error" class="text-danger"></span>
                @Html.ValidationMessageFor(model => model.StudentRegNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "First Name" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control", placeholder = "Middle Name" } })
                @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "Last Name" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.DisplayName, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control", placeholder = "Display Name", id = "DisplayName" } })
                <span id="DisplayName-error" class="text-danger"></span>
                @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Email Address", type = "email", id = "StudentEmail" } })
                <span id="StudentEmail-error" class="text-danger"></span>
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })<span class="required-asterisk text-danger">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</span>
            </div>
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.Gender, new SelectList(new[]
                         {
                new SelectListItem { Text = "Male", Value = "Male" },
                new SelectListItem { Text = "Female", Value = "Female" },
                new SelectListItem { Text = "Other", Value = "Other" },
                }, "Value", "Text"), "Gender", new { @class = "form-control form-select" })
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label col-md-2" })<span class="required-asterisk text-danger">&nbsp;&nbsp;*</span>
            </div>
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.DOB, "{0:MM-dd-yyyy}", new { @class = "form-control", placeholder = "MM-DD-YYYY", id = "DOB" })
                @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", placeholder = "Address" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.ContactNo, htmlAttributes: new { @class = "col-form-label", style = "word-wrap: break-word;" })<span class="required-asterisk text-danger">*</span>
            </div>
            <div class="col-md-8">
                @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control", placeholder = "Contact No" } })
                @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-4">
                @Html.LabelFor(model => model.IsEnable, htmlAttributes: new { @class = "col-form-label" })
            </div>
            <div class="col-md-8">
                <div class="form-check m-3">
                    @Html.CheckBoxFor(model => model.IsEnable, new { @class = "form-check-input", id = "Enable" })
                </div>
            </div>
        </div>

        <div class="form-group row m-2">
            <div class="col-md-10 offset-md-4">
                <br />
                <input type="submit" value="@((Model.StudentID == null ? "Create" : "Update"))" class="btn text-light" style="background-color: #9F2B68" />
                <a href="#" class="btn btn-secondary" onclick="backStudent()">Back</a>
            </div>
        </div>
    </div>
</form>





<script>
    $(document).ready(function () {
        $('#studentForm').submit(function (e) {
            e.preventDefault();

            // Perform Ajax request
            $.ajax({
                url: $(this).attr('action'), // Action URL specified in form tag
                type: $(this).attr('method'), // HTTP method (post/get)
                data: $(this).serialize(), // Serialize form data
                success: function (response) {
                    // Handle success
                    addStudentSuccess(response);
                },
                error: function (xhr, status, error) {
                    // Handle errors
                    addStudentFailure(xhr);
                }
            });
        });
    });
    $("#DOB").datepicker({
        dateFormat: "mm-dd-yy",
        changeYear: true,
        changeMonth: true,
        yearRange: "-100:+0", 
        maxDate: "0" 
    });

    //Check Registration Number already exists
    $('#StudentRegNo').change(function () {
        var regNo = $(this).val();
        var stdID = $('#StudentID').val();
        $.ajax({
            url: '/Student/IsStudentRegAvailable',
            type: 'GET',
            data: { regNo: regNo, stdID: stdID },
            success: function (response) {
                if (response.isAvailable) {
                    $('#StudentRegNo-error').text('Student registration number already exists.');
                }
                else {
                    $('#StudentRegNo-error').text('');

                }
            }
        });
    });

    //Check Display Name already exists
    $('#DisplayName').change(function () {
        var studentName = $(this).val();
        var stdID = $('#StudentID').val();
        $.ajax({
            url: '/Student/IsStudentNameAvailable',
            type: 'GET',
            data: { studentName: studentName, stdID: stdID },
            success: function (response) {
                if (response.isAvailable) {
                    $('#DisplayName-error').text('Student display name already exists.');
                }
                else{
                    $('#DisplayName-error').text('');

                }
            }
        });
    });

    //Check email  already exist
    $('#StudentEmail').change(function () {
        var studentEmail = $(this).val();
        var stdID = $('#StudentID').val();
        $.ajax({
            url: '/Student/IsStudentEmailAvailable',
            type: 'GET',
            data: { studentEmail: studentEmail, stdID: stdID },
            success: function (response) {
                if (response.isAvailable) {
                    $('#StudentEmail-error').text('Student Email already exists.');
                }
                else {
                    $('#StudentEmail-error').text('');

                }
            }
        });
    });
</script>

