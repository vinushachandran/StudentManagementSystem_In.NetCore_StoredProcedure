@model SMS.Model.Allocation.StudentAllocationBO

<form id="StudentAllocationForm" asp-action="AddStudentAllocation" asp-controller="Allocation" method="post" class="border p-4 mx-auto Customform" style="max-width: 600px;">
    @Html.HiddenFor(model => model.SubjectAllocationID, new { id = "subAlloID" })

    @Html.AntiForgeryToken()

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="justify-content-center align-items-center">
        <div class="form-group row m-2">

            <div class="form-group row m-1">
                <div class="col-md-4 p-2">
                    @Html.LabelFor(model => model.StudentID, "Student")<span class="required-asterisk">*</span>
                </div>
                <div class="col-md-8 ">

                    @if (Model.StudentAllocationID != null)
                    {
                        @Html.DropDownListFor(model => model.StudentID, new SelectList(ViewBag.Students, "StudentID", "Name"), new { @class = "form-select", disabled = "disabled" })
                        @Html.HiddenFor(model => model.StudentID)
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.StudentID, new SelectList(ViewBag.Students, "StudentID", "Name"), "-Select Student-", new { @class = "form-select" })
                    }


                    @Html.ValidationMessageFor(model => model.StudentID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row m-1">
                <div class="col-md-4 p-2">
                    @Html.LabelFor(model => model.SubjectAllocationID, "Subject")<span class="required-asterisk"> *</span>
                </div>
                <div class="col-md-8">
                    <select id="subjectDropdown" class="form-select">
                        <option value="">Select Subject</option>
                    </select>
                    @Html.ValidationMessageFor(model => model.SubjectAllocationID, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group row m-1">
                <div class="col-md-4 p-2">
                    @Html.LabelFor(model => model.SubjectAllocationID, "Teacher")<span class="required-asterisk"> *</span>
                </div>
                <div class="col-md-8">
                    <select id="teacherDropdown" class="form-select">
                        <option value="">Select Teacher</option>
                    </select>
                    @Html.ValidationMessageFor(model => model.SubjectAllocationID, "", new { @class = "text-danger" })

                </div>

            </div>



        </div>


        <div class="form-group row m-2">
            <div class="col-md-10 offset-md-4">
                <br />
                <input type="submit" value="@(Model.StudentAllocationID == null ? "Create" : "Update")" class="btn btn-primary" />
                <a href="#" class="btn btn-secondary" onclick="backStudentAllocation()">Back</a>
            </div>
        </div>
    </div>
</form>

<script>
    $(document).ready(function () {
        $('#StudentAllocationForm').submit(function (event) {
            event.preventDefault();

            var form = $(this);
            $.ajax({
                type: form.attr('method'),
                url: form.attr('action'),
                data: form.serialize(),
                success: function (response) {
                    StudentAllocationSuccess(response);
                },
                error: function (xhr, status, error) {
                    StudentAllocationFailure(xhr, status, error);
                }
            });
        });

    });

    //Subject Teachers
    $('#subjectDropdown').change(function () {
        var subjectId = $(this).val();
        if (subjectId !== '') {
            $.ajax({
                url: '/Allocation/GetTeachersBySubject',
                type: 'GET',
                data: { subjectId: subjectId },
                success: function (response) {
                    $('#teacherDropdown').empty();
                    $('#teacherDropdown').append($('<option>', {
                        value: '',
                        text: '-Select Teacher-'
                    }));
                    var id = 0;
                    $('#subAlloID').val(id);
                    $.each(response.data, function (index, item) {
                        console.log(item);
                        $('#teacherDropdown').append($('<option>', {
                            value: item.teacherID,
                            text: item.teacherRegNo + ' - ' + item.displayName
                        }));
                    });
                },
                error: function () {
                    console.log('Error fetching teachers.');
                }
            });
        } else {
            $('#teacherDropdown').empty();
            $('#teacherDropdown').append($('<option>', {
                value: '',
                text: '-Select Teacher-',
            }));
        }
    });

    $('#teacherDropdown').change(function () {
        var teacherID = $(this).val();
        $('#subAlloID').val(teacherID);

    });
</script>